% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/driver_fst.R
\name{storr_fst}
\alias{storr_fst}
\alias{driver_fst}
\title{fst object cache driver}
\usage{
storr_fst(path, compress = NULL, mangle_key = NULL,
  mangle_key_pad = NULL, hash_algorithm = NULL,
  default_namespace = "objects")

driver_fst(path, compress = NULL, mangle_key = NULL,
  mangle_key_pad = NULL, hash_algorithm = NULL)
}
\arguments{
\item{path}{Path for the store.  \code{tempdir()} is a good choice
for ephemeral storage, The \code{rappdirs} package (on CRAN)
might be nice for persistent application data.}

\item{compress}{Compress the generated file?  This saves a small
amount of space for a reasonable amount of time. Possible values
are \code{"none"} for no compression, \code{"gzfile"} to write
to a \code{gzfile} connection (default), and \code{"fst"} to use
\code{compress_fst()} (recommended, but requires the \code{fst} package).
To preserve back compatibility, \code{compress} can also be logical:
\code{TRUE} for \code{"gzfile"} and \code{FALSE} for \code{"none"}.
However, these values are not interchangeable for existings \code{storr}s.
For example, if you create a \code{storr} with \code{compress = TRUE},
you must continue to use \code{compress = TRUE}
and not \code{compress = "gzfile"} when you recover it later.}

\item{mangle_key}{Mangle keys?  If TRUE, then the key is encoded
using base64 before saving to the filesystem.  See Details.}

\item{mangle_key_pad}{Logical indicating if the filenames created
when using \code{mangle_key} should also be "padded" with the
\code{=} character to make up a round number of bytes.  Padding
is required to satisfy the document that describes base64
encoding (RFC 4648) but can cause problems in some applications
(see \href{https://github.com/richfitz/storr/issues/43}{this
issue}.  The default is to not pad \emph{new} storr archives.
This should be generally safe to leave alone.}

\item{hash_algorithm}{Name of the hash algorithm to use.  Possible
values are "md5", "sha1", and others supported by
\code{\link{digest}}.  If not given, then we will default to
"md5".}

\item{default_namespace}{Default namespace (see
\code{\link{storr}}).}
}
\description{
fst object cache driver
}
\examples{

# Create an fst storr in R's temporary directory:
st <- storr_fst(tempfile())

# Store some data (10 random numbers against the key "foo")
st$set("foo", runif(10))
st$list()

# And retrieve the data:
st$get("foo")

# Keys that are not valid filenames will cause issues.  This will
# cause an error:
\dontrun{
st$set("foo/bar", letters)
}

# The solution to this is to "mangle" the key names.  Storr can do
# this for you:
st2 <- storr_fst(tempfile(), mangle_key = TRUE)
st2$set("foo/bar", letters)
st2$list()
st2$get("foo/bar")

# Behind the scenes, storr is safely encoding the filenames with base64:
dir(file.path(st2$driver$path, "keys", "objects"))

# Clean up the two storrs:
st$destroy()
st2$destroy()
}
